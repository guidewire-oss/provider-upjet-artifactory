//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ContentSynchronisationInitParameters) DeepCopyInto(out *ContentSynchronisationInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ContentSynchronisationInitParameters.
func (in *ContentSynchronisationInitParameters) DeepCopy() *ContentSynchronisationInitParameters {
	if in == nil {
		return nil
	}
	out := new(ContentSynchronisationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ContentSynchronisationObservation) DeepCopyInto(out *ContentSynchronisationObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ContentSynchronisationObservation.
func (in *ContentSynchronisationObservation) DeepCopy() *ContentSynchronisationObservation {
	if in == nil {
		return nil
	}
	out := new(ContentSynchronisationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ContentSynchronisationParameters) DeepCopyInto(out *ContentSynchronisationParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ContentSynchronisationParameters.
func (in *ContentSynchronisationParameters) DeepCopy() *ContentSynchronisationParameters {
	if in == nil {
		return nil
	}
	out := new(ContentSynchronisationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GenericRepository) DeepCopyInto(out *GenericRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GenericRepository.
func (in *GenericRepository) DeepCopy() *GenericRepository {
	if in == nil {
		return nil
	}
	out := new(GenericRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *GenericRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GenericRepositoryInitParameters) DeepCopyInto(out *GenericRepositoryInitParameters) {
	*out = *in
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GenericRepositoryInitParameters.
func (in *GenericRepositoryInitParameters) DeepCopy() *GenericRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(GenericRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GenericRepositoryList) DeepCopyInto(out *GenericRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]GenericRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GenericRepositoryList.
func (in *GenericRepositoryList) DeepCopy() *GenericRepositoryList {
	if in == nil {
		return nil
	}
	out := new(GenericRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *GenericRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GenericRepositoryObservation) DeepCopyInto(out *GenericRepositoryObservation) {
	*out = *in
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.PackageType != nil {
		in, out := &in.PackageType, &out.PackageType
		*out = new(string)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GenericRepositoryObservation.
func (in *GenericRepositoryObservation) DeepCopy() *GenericRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(GenericRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GenericRepositoryParameters) DeepCopyInto(out *GenericRepositoryParameters) {
	*out = *in
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GenericRepositoryParameters.
func (in *GenericRepositoryParameters) DeepCopy() *GenericRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(GenericRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GenericRepositorySpec) DeepCopyInto(out *GenericRepositorySpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GenericRepositorySpec.
func (in *GenericRepositorySpec) DeepCopy() *GenericRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(GenericRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GenericRepositoryStatus) DeepCopyInto(out *GenericRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GenericRepositoryStatus.
func (in *GenericRepositoryStatus) DeepCopy() *GenericRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(GenericRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LocalMavenRepository) DeepCopyInto(out *LocalMavenRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LocalMavenRepository.
func (in *LocalMavenRepository) DeepCopy() *LocalMavenRepository {
	if in == nil {
		return nil
	}
	out := new(LocalMavenRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *LocalMavenRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LocalMavenRepositoryInitParameters) DeepCopyInto(out *LocalMavenRepositoryInitParameters) {
	*out = *in
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ChecksumPolicyType != nil {
		in, out := &in.ChecksumPolicyType, &out.ChecksumPolicyType
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HandleReleases != nil {
		in, out := &in.HandleReleases, &out.HandleReleases
		*out = new(bool)
		**out = **in
	}
	if in.HandleSnapshots != nil {
		in, out := &in.HandleSnapshots, &out.HandleSnapshots
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.MaxUniqueSnapshots != nil {
		in, out := &in.MaxUniqueSnapshots, &out.MaxUniqueSnapshots
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.SnapshotVersionBehavior != nil {
		in, out := &in.SnapshotVersionBehavior, &out.SnapshotVersionBehavior
		*out = new(string)
		**out = **in
	}
	if in.SuppressPomConsistencyChecks != nil {
		in, out := &in.SuppressPomConsistencyChecks, &out.SuppressPomConsistencyChecks
		*out = new(bool)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LocalMavenRepositoryInitParameters.
func (in *LocalMavenRepositoryInitParameters) DeepCopy() *LocalMavenRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(LocalMavenRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LocalMavenRepositoryList) DeepCopyInto(out *LocalMavenRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]LocalMavenRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LocalMavenRepositoryList.
func (in *LocalMavenRepositoryList) DeepCopy() *LocalMavenRepositoryList {
	if in == nil {
		return nil
	}
	out := new(LocalMavenRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *LocalMavenRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LocalMavenRepositoryObservation) DeepCopyInto(out *LocalMavenRepositoryObservation) {
	*out = *in
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ChecksumPolicyType != nil {
		in, out := &in.ChecksumPolicyType, &out.ChecksumPolicyType
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HandleReleases != nil {
		in, out := &in.HandleReleases, &out.HandleReleases
		*out = new(bool)
		**out = **in
	}
	if in.HandleSnapshots != nil {
		in, out := &in.HandleSnapshots, &out.HandleSnapshots
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.MaxUniqueSnapshots != nil {
		in, out := &in.MaxUniqueSnapshots, &out.MaxUniqueSnapshots
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.PackageType != nil {
		in, out := &in.PackageType, &out.PackageType
		*out = new(string)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.SnapshotVersionBehavior != nil {
		in, out := &in.SnapshotVersionBehavior, &out.SnapshotVersionBehavior
		*out = new(string)
		**out = **in
	}
	if in.SuppressPomConsistencyChecks != nil {
		in, out := &in.SuppressPomConsistencyChecks, &out.SuppressPomConsistencyChecks
		*out = new(bool)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LocalMavenRepositoryObservation.
func (in *LocalMavenRepositoryObservation) DeepCopy() *LocalMavenRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(LocalMavenRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LocalMavenRepositoryParameters) DeepCopyInto(out *LocalMavenRepositoryParameters) {
	*out = *in
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ChecksumPolicyType != nil {
		in, out := &in.ChecksumPolicyType, &out.ChecksumPolicyType
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HandleReleases != nil {
		in, out := &in.HandleReleases, &out.HandleReleases
		*out = new(bool)
		**out = **in
	}
	if in.HandleSnapshots != nil {
		in, out := &in.HandleSnapshots, &out.HandleSnapshots
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.MaxUniqueSnapshots != nil {
		in, out := &in.MaxUniqueSnapshots, &out.MaxUniqueSnapshots
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.SnapshotVersionBehavior != nil {
		in, out := &in.SnapshotVersionBehavior, &out.SnapshotVersionBehavior
		*out = new(string)
		**out = **in
	}
	if in.SuppressPomConsistencyChecks != nil {
		in, out := &in.SuppressPomConsistencyChecks, &out.SuppressPomConsistencyChecks
		*out = new(bool)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LocalMavenRepositoryParameters.
func (in *LocalMavenRepositoryParameters) DeepCopy() *LocalMavenRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(LocalMavenRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LocalMavenRepositorySpec) DeepCopyInto(out *LocalMavenRepositorySpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LocalMavenRepositorySpec.
func (in *LocalMavenRepositorySpec) DeepCopy() *LocalMavenRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(LocalMavenRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LocalMavenRepositoryStatus) DeepCopyInto(out *LocalMavenRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LocalMavenRepositoryStatus.
func (in *LocalMavenRepositoryStatus) DeepCopy() *LocalMavenRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(LocalMavenRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LocalNpmRepository) DeepCopyInto(out *LocalNpmRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LocalNpmRepository.
func (in *LocalNpmRepository) DeepCopy() *LocalNpmRepository {
	if in == nil {
		return nil
	}
	out := new(LocalNpmRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *LocalNpmRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LocalNpmRepositoryInitParameters) DeepCopyInto(out *LocalNpmRepositoryInitParameters) {
	*out = *in
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LocalNpmRepositoryInitParameters.
func (in *LocalNpmRepositoryInitParameters) DeepCopy() *LocalNpmRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(LocalNpmRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LocalNpmRepositoryList) DeepCopyInto(out *LocalNpmRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]LocalNpmRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LocalNpmRepositoryList.
func (in *LocalNpmRepositoryList) DeepCopy() *LocalNpmRepositoryList {
	if in == nil {
		return nil
	}
	out := new(LocalNpmRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *LocalNpmRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LocalNpmRepositoryObservation) DeepCopyInto(out *LocalNpmRepositoryObservation) {
	*out = *in
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.PackageType != nil {
		in, out := &in.PackageType, &out.PackageType
		*out = new(string)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LocalNpmRepositoryObservation.
func (in *LocalNpmRepositoryObservation) DeepCopy() *LocalNpmRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(LocalNpmRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LocalNpmRepositoryParameters) DeepCopyInto(out *LocalNpmRepositoryParameters) {
	*out = *in
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LocalNpmRepositoryParameters.
func (in *LocalNpmRepositoryParameters) DeepCopy() *LocalNpmRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(LocalNpmRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LocalNpmRepositorySpec) DeepCopyInto(out *LocalNpmRepositorySpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LocalNpmRepositorySpec.
func (in *LocalNpmRepositorySpec) DeepCopy() *LocalNpmRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(LocalNpmRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LocalNpmRepositoryStatus) DeepCopyInto(out *LocalNpmRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LocalNpmRepositoryStatus.
func (in *LocalNpmRepositoryStatus) DeepCopy() *LocalNpmRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(LocalNpmRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RemoteMavenRepository) DeepCopyInto(out *RemoteMavenRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RemoteMavenRepository.
func (in *RemoteMavenRepository) DeepCopy() *RemoteMavenRepository {
	if in == nil {
		return nil
	}
	out := new(RemoteMavenRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RemoteMavenRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RemoteMavenRepositoryInitParameters) DeepCopyInto(out *RemoteMavenRepositoryInitParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]ContentSynchronisationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Curated != nil {
		in, out := &in.Curated, &out.Curated
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.FetchJarsEagerly != nil {
		in, out := &in.FetchJarsEagerly, &out.FetchJarsEagerly
		*out = new(bool)
		**out = **in
	}
	if in.FetchSourcesEagerly != nil {
		in, out := &in.FetchSourcesEagerly, &out.FetchSourcesEagerly
		*out = new(bool)
		**out = **in
	}
	if in.HandleReleases != nil {
		in, out := &in.HandleReleases, &out.HandleReleases
		*out = new(bool)
		**out = **in
	}
	if in.HandleSnapshots != nil {
		in, out := &in.HandleSnapshots, &out.HandleSnapshots
		*out = new(bool)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MaxUniqueSnapshots != nil {
		in, out := &in.MaxUniqueSnapshots, &out.MaxUniqueSnapshots
		*out = new(float64)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RejectInvalidJars != nil {
		in, out := &in.RejectInvalidJars, &out.RejectInvalidJars
		*out = new(bool)
		**out = **in
	}
	if in.RemoteRepoChecksumPolicyType != nil {
		in, out := &in.RemoteRepoChecksumPolicyType, &out.RemoteRepoChecksumPolicyType
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SuppressPomConsistencyChecks != nil {
		in, out := &in.SuppressPomConsistencyChecks, &out.SuppressPomConsistencyChecks
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RemoteMavenRepositoryInitParameters.
func (in *RemoteMavenRepositoryInitParameters) DeepCopy() *RemoteMavenRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(RemoteMavenRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RemoteMavenRepositoryList) DeepCopyInto(out *RemoteMavenRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]RemoteMavenRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RemoteMavenRepositoryList.
func (in *RemoteMavenRepositoryList) DeepCopy() *RemoteMavenRepositoryList {
	if in == nil {
		return nil
	}
	out := new(RemoteMavenRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RemoteMavenRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RemoteMavenRepositoryObservation) DeepCopyInto(out *RemoteMavenRepositoryObservation) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]ContentSynchronisationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Curated != nil {
		in, out := &in.Curated, &out.Curated
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.FetchJarsEagerly != nil {
		in, out := &in.FetchJarsEagerly, &out.FetchJarsEagerly
		*out = new(bool)
		**out = **in
	}
	if in.FetchSourcesEagerly != nil {
		in, out := &in.FetchSourcesEagerly, &out.FetchSourcesEagerly
		*out = new(bool)
		**out = **in
	}
	if in.HandleReleases != nil {
		in, out := &in.HandleReleases, &out.HandleReleases
		*out = new(bool)
		**out = **in
	}
	if in.HandleSnapshots != nil {
		in, out := &in.HandleSnapshots, &out.HandleSnapshots
		*out = new(bool)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MaxUniqueSnapshots != nil {
		in, out := &in.MaxUniqueSnapshots, &out.MaxUniqueSnapshots
		*out = new(float64)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PackageType != nil {
		in, out := &in.PackageType, &out.PackageType
		*out = new(string)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RejectInvalidJars != nil {
		in, out := &in.RejectInvalidJars, &out.RejectInvalidJars
		*out = new(bool)
		**out = **in
	}
	if in.RemoteRepoChecksumPolicyType != nil {
		in, out := &in.RemoteRepoChecksumPolicyType, &out.RemoteRepoChecksumPolicyType
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SuppressPomConsistencyChecks != nil {
		in, out := &in.SuppressPomConsistencyChecks, &out.SuppressPomConsistencyChecks
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RemoteMavenRepositoryObservation.
func (in *RemoteMavenRepositoryObservation) DeepCopy() *RemoteMavenRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(RemoteMavenRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RemoteMavenRepositoryParameters) DeepCopyInto(out *RemoteMavenRepositoryParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]ContentSynchronisationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Curated != nil {
		in, out := &in.Curated, &out.Curated
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.FetchJarsEagerly != nil {
		in, out := &in.FetchJarsEagerly, &out.FetchJarsEagerly
		*out = new(bool)
		**out = **in
	}
	if in.FetchSourcesEagerly != nil {
		in, out := &in.FetchSourcesEagerly, &out.FetchSourcesEagerly
		*out = new(bool)
		**out = **in
	}
	if in.HandleReleases != nil {
		in, out := &in.HandleReleases, &out.HandleReleases
		*out = new(bool)
		**out = **in
	}
	if in.HandleSnapshots != nil {
		in, out := &in.HandleSnapshots, &out.HandleSnapshots
		*out = new(bool)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MaxUniqueSnapshots != nil {
		in, out := &in.MaxUniqueSnapshots, &out.MaxUniqueSnapshots
		*out = new(float64)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RejectInvalidJars != nil {
		in, out := &in.RejectInvalidJars, &out.RejectInvalidJars
		*out = new(bool)
		**out = **in
	}
	if in.RemoteRepoChecksumPolicyType != nil {
		in, out := &in.RemoteRepoChecksumPolicyType, &out.RemoteRepoChecksumPolicyType
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SuppressPomConsistencyChecks != nil {
		in, out := &in.SuppressPomConsistencyChecks, &out.SuppressPomConsistencyChecks
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RemoteMavenRepositoryParameters.
func (in *RemoteMavenRepositoryParameters) DeepCopy() *RemoteMavenRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(RemoteMavenRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RemoteMavenRepositorySpec) DeepCopyInto(out *RemoteMavenRepositorySpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RemoteMavenRepositorySpec.
func (in *RemoteMavenRepositorySpec) DeepCopy() *RemoteMavenRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(RemoteMavenRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RemoteMavenRepositoryStatus) DeepCopyInto(out *RemoteMavenRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RemoteMavenRepositoryStatus.
func (in *RemoteMavenRepositoryStatus) DeepCopy() *RemoteMavenRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(RemoteMavenRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RemoteNpmRepository) DeepCopyInto(out *RemoteNpmRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RemoteNpmRepository.
func (in *RemoteNpmRepository) DeepCopy() *RemoteNpmRepository {
	if in == nil {
		return nil
	}
	out := new(RemoteNpmRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RemoteNpmRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RemoteNpmRepositoryContentSynchronisationInitParameters) DeepCopyInto(out *RemoteNpmRepositoryContentSynchronisationInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RemoteNpmRepositoryContentSynchronisationInitParameters.
func (in *RemoteNpmRepositoryContentSynchronisationInitParameters) DeepCopy() *RemoteNpmRepositoryContentSynchronisationInitParameters {
	if in == nil {
		return nil
	}
	out := new(RemoteNpmRepositoryContentSynchronisationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RemoteNpmRepositoryContentSynchronisationObservation) DeepCopyInto(out *RemoteNpmRepositoryContentSynchronisationObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RemoteNpmRepositoryContentSynchronisationObservation.
func (in *RemoteNpmRepositoryContentSynchronisationObservation) DeepCopy() *RemoteNpmRepositoryContentSynchronisationObservation {
	if in == nil {
		return nil
	}
	out := new(RemoteNpmRepositoryContentSynchronisationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RemoteNpmRepositoryContentSynchronisationParameters) DeepCopyInto(out *RemoteNpmRepositoryContentSynchronisationParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RemoteNpmRepositoryContentSynchronisationParameters.
func (in *RemoteNpmRepositoryContentSynchronisationParameters) DeepCopy() *RemoteNpmRepositoryContentSynchronisationParameters {
	if in == nil {
		return nil
	}
	out := new(RemoteNpmRepositoryContentSynchronisationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RemoteNpmRepositoryInitParameters) DeepCopyInto(out *RemoteNpmRepositoryInitParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]RemoteNpmRepositoryContentSynchronisationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Curated != nil {
		in, out := &in.Curated, &out.Curated
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RemoteNpmRepositoryInitParameters.
func (in *RemoteNpmRepositoryInitParameters) DeepCopy() *RemoteNpmRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(RemoteNpmRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RemoteNpmRepositoryList) DeepCopyInto(out *RemoteNpmRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]RemoteNpmRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RemoteNpmRepositoryList.
func (in *RemoteNpmRepositoryList) DeepCopy() *RemoteNpmRepositoryList {
	if in == nil {
		return nil
	}
	out := new(RemoteNpmRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RemoteNpmRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RemoteNpmRepositoryObservation) DeepCopyInto(out *RemoteNpmRepositoryObservation) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]RemoteNpmRepositoryContentSynchronisationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Curated != nil {
		in, out := &in.Curated, &out.Curated
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PackageType != nil {
		in, out := &in.PackageType, &out.PackageType
		*out = new(string)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RemoteNpmRepositoryObservation.
func (in *RemoteNpmRepositoryObservation) DeepCopy() *RemoteNpmRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(RemoteNpmRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RemoteNpmRepositoryParameters) DeepCopyInto(out *RemoteNpmRepositoryParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]RemoteNpmRepositoryContentSynchronisationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Curated != nil {
		in, out := &in.Curated, &out.Curated
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RemoteNpmRepositoryParameters.
func (in *RemoteNpmRepositoryParameters) DeepCopy() *RemoteNpmRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(RemoteNpmRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RemoteNpmRepositorySpec) DeepCopyInto(out *RemoteNpmRepositorySpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RemoteNpmRepositorySpec.
func (in *RemoteNpmRepositorySpec) DeepCopy() *RemoteNpmRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(RemoteNpmRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RemoteNpmRepositoryStatus) DeepCopyInto(out *RemoteNpmRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RemoteNpmRepositoryStatus.
func (in *RemoteNpmRepositoryStatus) DeepCopy() *RemoteNpmRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(RemoteNpmRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VirtualMavenRepository) DeepCopyInto(out *VirtualMavenRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VirtualMavenRepository.
func (in *VirtualMavenRepository) DeepCopy() *VirtualMavenRepository {
	if in == nil {
		return nil
	}
	out := new(VirtualMavenRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VirtualMavenRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VirtualMavenRepositoryInitParameters) DeepCopyInto(out *VirtualMavenRepositoryInitParameters) {
	*out = *in
	if in.ArtifactoryRequestsCanRetrieveRemoteArtifacts != nil {
		in, out := &in.ArtifactoryRequestsCanRetrieveRemoteArtifacts, &out.ArtifactoryRequestsCanRetrieveRemoteArtifacts
		*out = new(bool)
		**out = **in
	}
	if in.DefaultDeploymentRepo != nil {
		in, out := &in.DefaultDeploymentRepo, &out.DefaultDeploymentRepo
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ForceMavenAuthentication != nil {
		in, out := &in.ForceMavenAuthentication, &out.ForceMavenAuthentication
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.KeyPair != nil {
		in, out := &in.KeyPair, &out.KeyPair
		*out = new(string)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.PomRepositoryReferencesCleanupPolicy != nil {
		in, out := &in.PomRepositoryReferencesCleanupPolicy, &out.PomRepositoryReferencesCleanupPolicy
		*out = new(string)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.Repositories != nil {
		in, out := &in.Repositories, &out.Repositories
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VirtualMavenRepositoryInitParameters.
func (in *VirtualMavenRepositoryInitParameters) DeepCopy() *VirtualMavenRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(VirtualMavenRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VirtualMavenRepositoryList) DeepCopyInto(out *VirtualMavenRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]VirtualMavenRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VirtualMavenRepositoryList.
func (in *VirtualMavenRepositoryList) DeepCopy() *VirtualMavenRepositoryList {
	if in == nil {
		return nil
	}
	out := new(VirtualMavenRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VirtualMavenRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VirtualMavenRepositoryObservation) DeepCopyInto(out *VirtualMavenRepositoryObservation) {
	*out = *in
	if in.ArtifactoryRequestsCanRetrieveRemoteArtifacts != nil {
		in, out := &in.ArtifactoryRequestsCanRetrieveRemoteArtifacts, &out.ArtifactoryRequestsCanRetrieveRemoteArtifacts
		*out = new(bool)
		**out = **in
	}
	if in.DefaultDeploymentRepo != nil {
		in, out := &in.DefaultDeploymentRepo, &out.DefaultDeploymentRepo
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ForceMavenAuthentication != nil {
		in, out := &in.ForceMavenAuthentication, &out.ForceMavenAuthentication
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.KeyPair != nil {
		in, out := &in.KeyPair, &out.KeyPair
		*out = new(string)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.PackageType != nil {
		in, out := &in.PackageType, &out.PackageType
		*out = new(string)
		**out = **in
	}
	if in.PomRepositoryReferencesCleanupPolicy != nil {
		in, out := &in.PomRepositoryReferencesCleanupPolicy, &out.PomRepositoryReferencesCleanupPolicy
		*out = new(string)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.Repositories != nil {
		in, out := &in.Repositories, &out.Repositories
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VirtualMavenRepositoryObservation.
func (in *VirtualMavenRepositoryObservation) DeepCopy() *VirtualMavenRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(VirtualMavenRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VirtualMavenRepositoryParameters) DeepCopyInto(out *VirtualMavenRepositoryParameters) {
	*out = *in
	if in.ArtifactoryRequestsCanRetrieveRemoteArtifacts != nil {
		in, out := &in.ArtifactoryRequestsCanRetrieveRemoteArtifacts, &out.ArtifactoryRequestsCanRetrieveRemoteArtifacts
		*out = new(bool)
		**out = **in
	}
	if in.DefaultDeploymentRepo != nil {
		in, out := &in.DefaultDeploymentRepo, &out.DefaultDeploymentRepo
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ForceMavenAuthentication != nil {
		in, out := &in.ForceMavenAuthentication, &out.ForceMavenAuthentication
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.KeyPair != nil {
		in, out := &in.KeyPair, &out.KeyPair
		*out = new(string)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.PomRepositoryReferencesCleanupPolicy != nil {
		in, out := &in.PomRepositoryReferencesCleanupPolicy, &out.PomRepositoryReferencesCleanupPolicy
		*out = new(string)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.Repositories != nil {
		in, out := &in.Repositories, &out.Repositories
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VirtualMavenRepositoryParameters.
func (in *VirtualMavenRepositoryParameters) DeepCopy() *VirtualMavenRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(VirtualMavenRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VirtualMavenRepositorySpec) DeepCopyInto(out *VirtualMavenRepositorySpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VirtualMavenRepositorySpec.
func (in *VirtualMavenRepositorySpec) DeepCopy() *VirtualMavenRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(VirtualMavenRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VirtualMavenRepositoryStatus) DeepCopyInto(out *VirtualMavenRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VirtualMavenRepositoryStatus.
func (in *VirtualMavenRepositoryStatus) DeepCopy() *VirtualMavenRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(VirtualMavenRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}
